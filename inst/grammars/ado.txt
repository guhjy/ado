#A partial EBNF grammar for the "ado" language of the statistical package Stata.
#Stata's other integrated language, the matrix-processing language Mata, is
#described in mata.txt. This grammar doesn't account for Stata's extensive practice
#of abbreviating commands and variable names; seems best or perhaps necessary to handle
#that at a level higher than the parser.

#This grammar isn't except coincidentally LALR or indeed yet acceptable to any parser generator.

#--------------------------------------------------------------------------------------------------------------
#Top-level stuff.
#Needs fleshing out with control-of-flow constructs, macros and other programming functionality.
#options need to be able to go anywhere
#immediate commands


StataScript     ::= StataCmd, { StataCmd } ;
StataCmd        ::= [PrefixCmd] CmdVerb [Varlist] [AssignmentExp] [IfExp] [InExp] [Weight] [",", { Options}] ;

#--------------------------------------------------------------------------------------------------------------
#Command constituents and modifiers

#Seems undesirable to hard-code the acceptable commands into the grammar
CmdVerb         ::= !ReservedWord Word ;

AssignmentExp   ::= "=", Expression ;

IfExp           ::= "if", Expression ;

InExp           ::= "in" Range ;
Range           ::= (Integer | "f" | "F"), ["/", (Integer | "l" | "L")] ;

Weight          ::= Weightword, "=", Expression ;
Weightword      ::= "weight" | ("fweight" | "frequency") | "pweight" | ("aweight" | "cellsize") | "iweight" ;

#--------------------------------------------------------------------------------------------------------------
#Prefix commands
#how to handle abbreviation of these commands?

PrefixCmd         ::= (ColonPrefixCmd, ":") | (NonColonPrefixCmd, [":"])

NonColonPrefixCmd ::= CaptureCmd | NoisilyCmd | QuietlyCmd ;
CaptureCmd        ::= "capture" ;
NoisilyCmd        ::= "noisily" ;
QuietlyCmd        ::= "quietly" ;

ColonPrefixCmd    ::= XiCmd         |
                      ByCmd         |
		      StatsByCmd    |
		      RollingCmd    |
		      BootstrapCmd  |
		      JackknifeCmd  |
		      PermuteCmd    |
		      SimulateCmd   |
		      SvyCmd        |
		      MiEstimateCmd |
		      NestregCmd    |
		      StepwiseCmd   |
		      FpCmd         |
		      MfpCmd        |
		      VersionCmd ;

#All of these have sufficiently unique syntax that the grammar
#has to describe them individually (ugh).
ByCmd           ::= "by", Varlist |
                    "by", Varlist, "(", Varlist, ")" |
                    "by", Varlist, ",", "sort" ;
XiCmd           ::= 
StatsByCmd      ::= 
RollingCmd      ::= 
BootstrapCmd    ::= 
JackknifeCmd    ::= 
PermuteCmd      ::= 
SimulateCmd     ::= 
SvyCmd          ::= 
MiEstimateCmd   ::= 
NestregCmd      ::= 
StepwiseCmd     ::= 
FpCmd           ::= 
MfpCmd          ::= 
VersionCmd      ::= 

#--------------------------------------------------------------------------------------------------------------
#Options

OptionList         ::= Option, { Option } ;
Option             ::= Word |
                       Word, "(" OptionArgumentList ")" ;
OptionArgumentList ::= OptionArgument, { (",", OptionArgument) } ;
OptionArgument     ::= Numlist | Varlist | Expression ;

#--------------------------------------------------------------------------------------------------------------
#Expressions in all their various forms, including matrix expressions.
Expression      ::= 

#--------------------------------------------------------------------------------------------------------------
#Labels


#--------------------------------------------------------------------------------------------------------------
#Strings


#--------------------------------------------------------------------------------------------------------------
#Dates and times


#--------------------------------------------------------------------------------------------------------------
#Characteristics


#--------------------------------------------------------------------------------------------------------------
#Numbers

Numlist         ::= Number, { Number } ;
Number          ::= Integer |
                    Integer, ".", PositiveInteger |
		    [-], ".", PositiveInteger ;

Integer         ::= PositiveInteger | NegativeInteger | "0"
NegativeInteger ::= "-", PositiveInteger
PositiveInteger ::= !"0" Digit, { Digit } ;

Digit           ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;

#--------------------------------------------------------------------------------------------------------------
#Identifiers
#need factor variables
#need to hard-code abbreviation syntax and wildcard characters

ReservedWord    ::= 

NewVarList      ::= Varname, "-", Varname ;
Varlist         ::= AbbrevVar, { AbbrevVar } ;

AbbrevVar       ::= 

Varname         ::= Word, [":", ValueLabelName] ;
Word            ::= (Letter | "_"), { Letter | Digit | "_" } ;

Letter          ::= LowercaseLetter | UppercaseLetter ;
UppercaseLetter ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" |
                    "H" | "I" | "J" | "K" | "L" | "M" | "N" |
                    "O" | "P" | "Q" | "R" | "S" | "T" | "U" |
                    "V" | "W" | "X" | "Y" | "Z" ;
LowercaseLetter ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" |
                    "h" | "i" | "j" | "k" | "l" | "m" | "n" |
		    "o" | "p" | "q" | "r" | "s" | "t" | "u" |
		    "v" | "w" | "x" | "y" | "z" ;

