%option bison-bridge
%option noyywrap

%{ /* -*- C++ -*- */
#include <cstring>
#include <cerrno>
#include <climits>
#include <cstdlib>
#include <iostream>
#include <string>
#include "RStata.hpp"
#include "ado.tab.hpp"
#include "RStataDriver.hpp"

#ifndef YYSTYPE
#define YYSTYPE yy::RStataParser::semantic_type
#endif

// Functions to eat comments
void long_comment();
void short_comment();

static yy::location loc;

typedef yy::RStataParser::token token;

// Code run each time a pattern is matched
# define YY_USER_ACTION  loc.columns(yyleng);
%}

D           [0-9]
L           [a-zA-Z_]
H           [a-fA-F0-9]
E           [Ee][+-]?{D}+
F           [FLfl]
M           (?i:(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec))
B           [ \t\v\r\f]

%%

%{
// Code run each time yylex is called
loc.step();
%}


                            /* ignore whitespace but track line and column numbers */
[\n]+                       loc.lines(yyleng); loc.step();
{B}+                        loc.step();

                            /* eat comments */
"/*"                        long_comment();
\/\/                        short_comment();
^\*                         short_comment();



                            /* if you write {{{ ... }}}, the ... will be executed as R code */
\{\{\{.*\}\}\}              {
                                char *s;
                                
                                /* chop off the first and last three characters of yytext,
                                   which are the {{{ and }}} that begin and end this command */
                                s = strdup(yytext);
                                s[strlen(s) - 3] = '\0';
                                s += 3;
                                
                                yylval->node = new EmbeddedRCmd(std::string(s));
                                return token::TOK_EMBEDDED_R;
                            }



                            /* string literals and string (or string-ish) data types */
\"\"                        {
                                yylval->node = new StringExprNode(std::string(""));
                                return token::TOK_STRING_MISSING;
                            }
\"(\\.|[^"\\])*\"           {
                                yylval->node = new StringExprNode(std::string(yytext));
                                return token::TOK_STRING_LITERAL;
                            }



                                                        /* datetime literals */
{D}{D}{M}{D}+                                           {
                                                            yylval->node = new DatetimeExprNode(std::string(yytext), std::string(""));
                                                            return token::TOK_DATE;
                                                        }
{D}{D}:{D}{D}(:{D}{D}(\.{D}+)?)?                        {
                                                            yylval->node = new DatetimeExprNode(std::string(""), std::string(yytext));
                                                            return token::TOK_TIME;
                                                        }
{D}{D}{M}{D}+[ \t]+{D}{D}:{D}{D}(:{D}{D}(\.{D}+)?)?     {
                                                            yylval->node = new DatetimeExprNode(std::string(yytext));
                                                            return token::TOK_DATETIME;
                                                        }



                            /* numbers and numeric data types */
\.                          {
                                yylval->node = new NumberExprNode(yytext);
                                return token::TOK_NUMBER_MISSING;
                            }
\.{L}                       {
                                yylval->node = new NumberExprNode(yytext);
                                return token::TOK_NUMBER_MISSING;
                            }

[+-]?0[xX]{H}+              { /* hex */
                                yylval->node = new NumberExprNode(yytext);
                                return token::TOK_NUMBER;
                            }
0{D}+                       { /* octal */
                                yylval->node = new NumberExprNode(yytext);
                                return token::TOK_NUMBER;
                            }
[+-]?{D}+(\.{D}+)?          { /* decimal */
                                yylval->node = new NumberExprNode(yytext);
                                return token::TOK_NUMBER;
                            }

{D}+{E}                     { /* scientific notation */
                                yylval->node = new NumberExprNode(yytext);
                                return token::TOK_NUMBER;
                            }
{D}*"."{D}+({E})?           {
                                yylval->node = new NumberExprNode(yytext);
                                return token::TOK_NUMBER;
                            }
{D}+"."{D}*({E})?           {
                                yylval->node = new NumberExprNode(yytext);
                                return token::TOK_NUMBER;
                            }



                            /* Other keywords */
(?i:using)                  { yylval->str = strdup(yytext); return token::TOK_USING; }
(?i:if)                     { yylval->str = strdup(yytext); return token::TOK_IF; }
(?i:in)                     { yylval->str = strdup(yytext); return token::TOK_IN; }
(1\:1|1\:m|m\:1|m\:m)       {
                                yylval->node = new StringExprNode(std::string(yytext));
                                return token::TOK_MERGE_SPEC;
                            }



                            /* logical operators and various single-character tokens */
"&"                         { yylval->str = strdup(yytext); return token::TOK_AND_OP; }
"|"                         { yylval->str = strdup(yytext); return token::TOK_OR_OP; }
">"                         { yylval->str = strdup(yytext); return token::TOK_GT_OP; }
"<"                         { yylval->str = strdup(yytext); return token::TOK_LT_OP; }
">="                        { yylval->str = strdup(yytext); return token::TOK_GE_OP; }
"<="                        { yylval->str = strdup(yytext); return token::TOK_LE_OP; }
"=="                        { yylval->str = strdup(yytext); return token::TOK_EQ_OP; }
"!="                        { yylval->str = strdup(yytext); return token::TOK_NE_OP; }
"~="                        { yylval->str = strdup(yytext); return token::TOK_NE_OP; }
"!"                         { yylval->str = strdup(yytext); return token::TOK_NEG_OP; }
"~"                         { yylval->str = strdup(yytext); return token::TOK_NEG_OP; }

\*                          { yylval->str = strdup(yytext); return token::TOK_STAR; }
\+                          { yylval->str = strdup(yytext); return token::TOK_PLUS; }
\/                          { yylval->str = strdup(yytext); return token::TOK_SLASH; }
\-                          { yylval->str = strdup(yytext); return token::TOK_MINUS; }
\^                          { yylval->str = strdup(yytext); return token::TOK_CARET; }
=                           { yylval->str = strdup(yytext); return token::TOK_ASSIGN; }

\[                          { yylval->str = strdup(yytext); return token::TOK_LBRACKET; }
\]                          { yylval->str = strdup(yytext); return token::TOK_RBRACKET; }
\(                          { yylval->str = strdup(yytext); return token::TOK_LPAREN; }
\)                          { yylval->str = strdup(yytext); return token::TOK_RPAREN; }
\{                          { yylval->str = strdup(yytext); return token::TOK_LBRACE; }
\}                          { yylval->str = strdup(yytext); return token::TOK_RBRACE; }
,                           { yylval->str = strdup(yytext); return token::TOK_COMMA; }
:                           { yylval->str = strdup(yytext); return token::TOK_COLON; }



                            /* command verbs that have to be hardcoded into the grammar */
(?i:capture)                {
                                yylval->node = MakeGeneralStataCmd(std::string(yytext)).create();
                                return token::TOK_CAPTURE;
                            }
(?i:quietly)                {
                                yylval->node = MakeGeneralStataCmd(std::string(yytext)).create();
                                return token::TOK_QUIETLY;
                            }
(?i:qui)                    {
                                yylval->node = MakeGeneralStataCmd(std::string("quietly")).create();
                                return token::TOK_QUIETLY;
                            }
(?i:noisily)                {
                                yylval->node = MakeGeneralStataCmd(std::string(yytext)).create();
                                return token::TOK_NOISILY;
                            }
(?i:merge)                  {
                                // this is an IDENT because the parser constructs this command with its options
                                yylval->ident = new IdentExprNode(std::string(yytext));
                                return token::TOK_MERGE;
                            }



                            /* all non-keyword identifiers */
[_A-Za-z][A-Za-z0-9_]*      {
                                yylval->ident = new IdentExprNode(std::string(yytext));
                                return token::TOK_IDENT;
                            }

<<EOF>>                     { yylval->str = strdup("END"); return token::TOK_END; }
%%

void long_comment()
{
    char c, c1;

loop:
    while ((c = getc(yyin)) != '*' && c != '\0')
        putchar(c);

    if ((c1 = getc(yyin)) != '/' && c != '\0')
    {
        unput(c1);
        goto loop;
    }

    if (c != '\0')
        putchar(c1);
}

void short_comment()
{
    char c;
    
    while ((c = getc(yyin)) != '\n' && c != 0)
        putchar(c);
}

// The scanning-related functions of the driver class, which depend on lexer-related objects
void
RStataDriver::scan_begin()
{
    yy_switch_to_buffer(yy_scan_string(text.c_str()));
}

void
RStataDriver::scan_end()
{
    yy_delete_buffer(YY_CURRENT_BUFFER);
}

