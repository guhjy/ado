%{
#include <cstring>
#include <iostream>
#include "rstata.hpp"
#include "ado.tab.hpp"
#define YY_DECL extern "C" int yylex()

using namespace std;

int line_num = 1;
int col_num = 0;

void long_comment();
void short_comment();
void count();
%}

D           [0-9]
L           [a-zA-Z_]
H           [a-fA-F0-9]
E           [Ee][+-]?{D}+
F           [FLfl]
M           (?i:(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec))

%option noyywrap

%%
                            /* eat comments but track line and column numbers */
"/*"                        { long_comment(); }
\/\/                        { short_comment(); }
^\*                         { short_comment(); }



                            /* if you write {{{ ... }}}, the ... will be executed as R code */
\{\{\{.*\}\}\}              {
                                char *s;
                                
                                count();
                                
                                /* chop off the first and last three characters of yylval.str,
                                   which are the {{{ and }}} that begin and end this command */
                                s = strdup(yytext);
                                s[strlen(s) - 3] = '\0';
                                s += 3;
                                
                                yylval.str = s;

                                return EMBEDDED_R;
                            }



                            /* string literals and string (or string-ish) data types */
\"\"                        { count(); yylval.str = strdup(yytext); return STRING_MISSING; }
\"(\\.|[^"\\])*\"           { count(); yylval.str = strdup(yytext); return STRING_LITERAL; }



                                                        /* datetime literals */
{D}{D}{M}{D}+                                           { count(); yylval.str = strdup(yytext); return DATE; }
{D}{D}:{D}{D}(:{D}{D}(\.{D}+)?)?                        { count(); yylval.str = strdup(yytext); return TIME; }
{D}{D}{M}{D}+[ \t]+{D}{D}:{D}{D}(:{D}{D}(\.{D}+)?)?     { count(); yylval.str = strdup(yytext); return DATETIME; }



                            /* numbers and numeric data types */
\.                          { count(); yylval.str = strdup(yytext); return NUMBER_MISSING; }
\.{L}                       { count(); yylval.str = strdup(yytext); return NUMBER_MISSING; }

[+-]?0[xX]{H}+              { count(); yylval.str = strdup(yytext); return NUMBER; } /* hex */
0{D}+                       { count(); yylval.str = strdup(yytext); return NUMBER; } /* octal */
[+-]?{D}+(\.{D}+)?          { count(); yylval.str = strdup(yytext); return NUMBER; } /* decimal */

{D}+{E}                     { count(); yylval.str = strdup(yytext); return NUMBER; } /* scientific notation */
{D}*"."{D}+({E})?           { count(); yylval.str = strdup(yytext); return NUMBER; }
{D}+"."{D}*({E})?           { count(); yylval.str = strdup(yytext); return NUMBER; }



                            /* Other keywords */
(?i:using)                  { count(); yylval.str = strdup(yytext); return USING; }
(?i:if)                     { count(); yylval.str = strdup(yytext); return IF; }
(?i:in)                     { count(); yylval.str = strdup(yytext); return IN; }



                            /* logical operators and various single-character tokens */
"&"                         { count(); yylval.str = strdup(yytext); return AND_OP; }
"|"                         { count(); yylval.str = strdup(yytext); return OR_OP; }
">="                        { count(); yylval.str = strdup(yytext); return GT_OP; }
"<="                        { count(); yylval.str = strdup(yytext); return LT_OP; }
"=="                        { count(); yylval.str = strdup(yytext); return EQ_OP; }
"!="                        { count(); yylval.str = strdup(yytext); return NE_OP; }
"~="                        { count(); yylval.str = strdup(yytext); return NE_OP; }
"!"                         { count(); yylval.str = strdup(yytext); return '!'; }
"~"                         { count(); yylval.str = strdup(yytext); return '~'; }

\*                          { count(); yylval.str = strdup(yytext); return '*'; }
\+                          { count(); yylval.str = strdup(yytext); return '+'; }
\/                          { count(); yylval.str = strdup(yytext); return '/'; }
\-                          { count(); yylval.str = strdup(yytext); return '-'; }
\^                          { count(); yylval.str = strdup(yytext); return '^'; }

\[                          { count(); yylval.str = strdup(yytext); return '['; }
\]                          { count(); yylval.str = strdup(yytext); return ']'; }
\(                          { count(); yylval.str = strdup(yytext); return '('; }
\)                          { count(); yylval.str = strdup(yytext); return ')'; }
\{                          { count(); yylval.str = strdup(yytext); return '{'; }
\}                          { count(); yylval.str = strdup(yytext); return '}'; }
\"                          { count(); yylval.str = strdup(yytext); return '"'; }
\'                          { count(); yylval.str = strdup(yytext); return '\''; }
=                           { count(); yylval.str = strdup(yytext); return '='; }
,                           { count(); yylval.str = strdup(yytext); return ','; }
:                           { count(); yylval.str = strdup(yytext); return ':'; }



                            /* command verbs that have to be hardcoded into the grammar */
(?i:capture)                { count(); yylval.str = strdup(yytext); return CAPTURE; }
(?i:quietly)                { count(); yylval.str = strdup(yytext); return QUIETLY; }
(?i:qui)                    { count(); yylval.str = strdup(yytext); return QUIETLY; }
(?i:noisily)                { count(); yylval.str = strdup(yytext); return NOISILY; }
(?i:merge)                  { count(); yylval.str = strdup(yytext); return MERGE; }



                            /* all non-keyword identifiers */
[_A-Za-z][A-Za-z0-9_]*      { count(); yylval.str = strdup(yytext); return IDENT; }



                            /* ignore whitespace but track line and column numbers */
\n                          { count(); ++line_num; return NEWLINE; }
[ \t\v\r\f]+                { count(); }
%%

void long_comment()
{
    char c, c1;

loop:
    while ((c = getc(yyin)) != '*' && c != '\0')
    {
        if (c == '\n')
        {
            col_num = 0;
            line_num++;
        }
        else if (c == '\t')
            col_num += 8 - (col_num % 8);
        else
            col_num++;
        
        putchar(c);
    }

    if ((c1 = getc(yyin)) != '/' && c != '\0')
    {
        col_num++; /* for the asterisk that got us here */
        
        unput(c1);
        goto loop;
    }

    if (c != '\0')
        putchar(c1);
}

void short_comment()
{
    char c;
    
    while ((c = getc(yyin)) != '\n' && c != 0)
    {
        if (c == '\t')
            col_num += 8 - (col_num % 8);
        else
            col_num++;
        
        putchar(c);
    }

    col_num = 0;
    line_num++;
}

void count()
{
    int i;

    for (i = 0; yytext[i] != '\0'; i++)
        if (yytext[i] == '\n')
            col_num = 0;
        else if (yytext[i] == '\t')
            col_num += 8 - (col_num % 8);
        else
            col_num++;
}

