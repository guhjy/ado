%{
#include <cstdio>
#include <cstring>
#include <iostream>
#include <Rcpp.h>
#include "rstata.hpp"

void raise_condition(const std::string& msg, const std::string& type);

extern "C" int yylex(void);

void yyerror(std::vector<std::unique_ptr<BaseStataCmd>> *cmdlist_ptr, const char *str)
{
        raise_condition(str, "error");
}
 
int yywrap()
{
        return 1;
} 
 
%}

%union {
    char *str;
}

%parse-param {std::vector<std::unique_ptr<BaseStataCmd>> *cmdlist_ptr}
%define parse.error verbose
%start commands


%token <str> EMBEDDED_R;

/* Literals of various fundamental types */
%token <str> NUMBER IDENT STRING_LITERAL UNQUOTED_FILEPATH
%token <str> NUMBER_MISSING STRING_MISSING

/* Type specifiers */
%token <str> BYTE INT LONG FLOAT DOUBLE STRING_TYPE_SPEC;

/* Multi-character infix operators */
%token <str> GT_OP LE_OP EQ_OP NE_OP OR_OP AND_OP

/* Formats */
%token <str> STRING_FORMAT DATETIME_FORMAT NUMBER_FORMAT

/* Command components and keywords */
%token <str> USING IF IN_CLAUSE

/* Commands with unusual enough syntax they have to be parsed separately */
%token <str> QUIETLY CAPTURE NOISILY /* Prefix commands that can be used without a colon */
%token <str> SET LOG DUPLICATES MERGE

%token <str> NEWLINE

%%

/*
 *************************************************
 * The start symbol, a "command" and escaping to R
 *************************************************
 */

commands:
      command
    | commands NEWLINE command
    ;

command:
      embedded_r_cmd
    | stata_cmd
    ;

embedded_r_cmd:
    EMBEDDED_R
    ;

stata_cmd:
      immediate_cmd
    | prefix_cmd_list nonmodifier_cmd
    ;

immediate_cmd:
      IDENT expression_list
    | IDENT expression_list ',' option_list
    ;

prefix_cmd_list:
      %empty
    | modifier_cmd_list nonmodifier_cmd ':'
    ;

modifier_cmd:
      CAPTURE
    | QUIETLY
    | NOISILY
    ;

modifier_cmd_list:
      modifier_cmd
    | modifier_cmd_list modifier_cmd
    ;

/* FIXME - everything after IDENT should be optional */
nonmodifier_cmd:
    special_cmd
    
    | IDENT filename
    | IDENT filename ',' option_list
    
    | IDENT varlist assignment_expression if_clause IN_CLAUSE weight_clause using_clause
    | IDENT varlist assignment_expression if_clause IN_CLAUSE weight_clause using_clause ',' option_list
    ;

special_cmd:
      set_cmd
    | log_cmd
    | duplicates_cmd
    | merge_cmd
    ;

/*
 ************************
 * The expression grammar
 ************************
 */

primary_expression:
      NUMBER
    | IDENT
    | STRING_LITERAL
    | STRING_MISSING
    | NUMBER_MISSING
    | '(' expression ')'
    ;

postfix_expression:
      primary_expression
    | postfix_expression '(' ')'
    | postfix_expression '(' argument_expression_list ')'
    ;

argument_expression_list:
      primary_expression
    | argument_expression_list ',' assignment_expression
    ;

unary_expression:
      postfix_expression
    | unary_operator postfix_expression
    ;

unary_operator:
      '-'
    | '+'
    | '!'
    ;

mult_expression:
      unary_expression
    | mult_expression '*' unary_expression
    | mult_expression '/' unary_expression
    | mult_expression '%' unary_expression
    ;

additive_expression:
    mult_expression
    | additive_expression '+' mult_expression
    | additive_expression '-' mult_expression
    ;

relational_expression:
    additive_expression
    | relational_expression '<' additive_expression
    | relational_expression '>' additive_expression
    | relational_expression LE_OP additive_expression
    | relational_expression GT_OP additive_expression
    ;

equality_expression:
      relational_expression
    | equality_expression EQ_OP relational_expression
    | equality_expression NE_OP relational_expression
    ;

and_expression:
      equality_expression
    | and_expression AND_OP equality_expression
    ;

or_expression:
      and_expression
    | or_expression OR_OP and_expression
    ;

assignment_expression:
    IDENT '=' or_expression
    ;

expression:
      assignment_expression
    | or_expression
    ;

expression_list:
      expression
    | expression_list expression
    ;

/*
 **************************************************
 * Varlists - needs more fleshing out in the future
 **************************************************
 */

varlist:
      IDENT
    | varlist IDENT
    ;

/*
 **************************************************
 * Options and option lists
 **************************************************
 */

option_list:
      option
    | option_list option
    ;

option:
      IDENT
    | IDENT '(' option_arguments ')'
    ;

/* FIXME: option args are much more baroque than this */
option_arguments:
      expression
    | option_arguments expression
    ;

/*
 **************************************************
 * The weight clause
 **************************************************
 */

weight_clause:
    '[' IDENT '=' expression ']';

/*
 **************************************************
 * The if clause
 **************************************************
 */

if_clause:
    IF expression
    ;

/*
 **************************************************
 * The using clause
 **************************************************
 */

filename:
      STRING_LITERAL
    | UNQUOTED_FILEPATH
    | IDENT
    ;

using_clause:
    USING filename
    ;

/*
 ******************************
 * The "special" Stata commands
 ******************************
 */

set_cmd:
    SET IDENT expression
    ;

duplicates_cmd:
    DUPLICATES
    ;

log_cmd:
    LOG
    ;

merge_cmd:
    MERGE
    ;

%%

void
raise_condition(const std::string& msg, const std::string& type)
{
  Rcpp::List cond;
  cond["message"] = msg;
  cond["call"] = R_NilValue;
  cond.attr("class") = Rcpp::CharacterVector::create(type, "condition");
  Rcpp::Function stopper("stop");
  stopper(cond);
}

