%skeleton "lalr1.cc" /* -*- C++ -*- */
%require "3.0.2"

%defines
%define parser_class_name { RStataParser }
%define parse.trace
%define parse.error verbose
%define api.token.prefix {TOK_}

%define api.pure
%pure-parser

%code requires
{
#include <memory>
#include "RStata.hpp"
class RStataDriver;

#define YY_DECL int yylex(yy::RStataParser::semantic_type* yylval_param, yy::RStataParser::location_type* llocp, RStataDriver& driver)

#define R_ACTION(node) if(driver.callbacks == 1) { driver.cmd_action(node->as_R_object()); }
}

%param { RStataDriver& driver }
%locations

%union
{
    std::string   *str;
    ExprNode      *node;
}

%code
{
#include "ado.tab.hpp"
#include <string>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <Rcpp.h>
#include "RStataDriver.hpp"

YY_DECL;

void yy::RStataParser::error(const location_type& l, const std::string& m)
{
        driver.error(l, m);
}
}

/* Operator  precedence */
%precedence RELATIONAL
%precedence "+" "-"
%precedence EXPONENT
%precedence "["
%precedence "("
%nonassoc LABEL

%token <str> END 0 "end of file"
%token <str> ILLEGAL_CHARACTER /* Not used, but invokes error handling if seen */

%token <str>
    PLUS            "+"
    LT_OP           "<"
    GT_OP           ">"
    LBRACE          "{"
    RBRACE          "}"
    COMMA           ","
    COLON           ":"
    NEG_OP          "!"
    STAR            "*"
    SLASH           "/"
    MINUS           "-"
    CARET           "^"
    ASSIGN          "="
    GE_OP           ">="
    LE_OP           "<="
    EQ_OP           "=="
    NE_OP           "!="
    OR_OP           "|"
    AND_OP          "&"
    LBRACKET        "["
    RBRACKET        "]"
    LPAREN          "("
    RPAREN          ")"
    NEWLINE         "\n"
    SEMICOLON       ";"
    FACT_CROSS      "##"
    CROSS           "#"
;

                /* Literals of various fundamental types */
%token <node>   NUMBER NUMBER_MISSING
%token <node>   IDENT IDENT_WITH_LEVEL
%token <node>   STRING_LITERAL STRING_MISSING
%token <node>   DATE DATETIME

                /* Type specifiers */
%token <str>    BYTE INT LONG FLOAT DOUBLE STRING_TYPE_SPEC;

                /* Formats */
%token <str>    STRING_FORMAT DATETIME_FORMAT NUMBER_FORMAT

                /* Commands with unusual enough syntax they have to be parsed separately */
%token <node>   EMBEDDED_R;
%token <node>   QUIETLY CAPTURE NOISILY /* Prefix commands that can be used without a colon */
%token <node>   GENERATE RECAST DISPLAY FORMAT MERGE

                /* Command components and keywords */
%token <str>    USING IF IN
%token <str>    MERGE_SPEC

                /* Factor variable operators */
%token <node>   CONT_OPERATOR IND_OPERATOR BASE_OPERATOR OMIT_OPERATOR

                /* Nonterminal token types */
%type <node>    translation_unit external_statement compound_cmd cmds modifier_cmd_list cmd
%type <node>    error

%type <node>    modifier_cmd nonmodifier_cmd

%type <node>    factor_operator

%type <str>     assignment_operator label_operator unary_operator power_operator equality_operator
%type <str>     multiplication_operator additive_operator relational_operator logical_operator
%type <str>     cross_operator
%type <str>     cmd_sep type_spec format_spec

%type <node>    if_clause in_clause weight_clause using_clause

%type <node>    expression
%type <node>    primary_expression label_expression postfix_expression power_expression
%type <node>    unary_expression multiplication_expression additive_expression
%type <node>    relational_expression equality_expression logical_expression
%type <node>    cross_expression factor_expression

%type <node>    option options
%type <node>    option_list argument_expression_list expression_list

%destructor { }            translation_unit
%destructor { delete $$; } <str>
%destructor { delete $$; } <node>

%start translation_unit
%%

/*
 *************************************************
 * The start symbol, a "command" and escaping to R
 *************************************************
 */

translation_unit:
      external_statement
    {
        driver.ast = $1;

        $$ = $1;
    }
    | translation_unit cmd_sep external_statement
    {
        $1->appendChild($3);
        driver.ast = $1;

        delete $2;
        
        $$ = $1;
    }
    ;

external_statement:
      cmd
    | error
    | compound_cmd
    ;

cmd_sep:
      "\n"
    | ";"
    ;

compound_cmd:
    "{" cmds "}"
    {
        delete $1;
        delete $3;

        $$ = $2;
    }
    ;

cmds:
      cmd
    {
        ExprNode *node = new ExprNode("rstata_compound_cmd");
        node->appendChild($1);
        $$ = node;
    }
    | cmds cmd_sep cmd
    {
        $1->appendChild($3);

        delete $2;

        $$ = $1;
    }
    ;

cmd:
      EMBEDDED_R
    {
        R_ACTION($1);
        
        $$ = $1;
    }
    | nonmodifier_cmd
    {
        R_ACTION($1);
        
        $$ = $1;
    }
    | modifier_cmd_list nonmodifier_cmd
    {
        $1->appendChild("main_cmd", $2);
        
        R_ACTION($1);
        
        $$ = $1;
    }
    | modifier_cmd_list ":" nonmodifier_cmd
    {
        $1->appendChild("main_cmd", $3);

        delete $2;

        R_ACTION($1);
        
        $$ = $1;
    }
    | modifier_cmd_list nonmodifier_cmd ":" nonmodifier_cmd
    {
        $1->appendChild("next_modifier", $2);
        $2->appendChild("main_cmd", $4);
        
        delete $3;
        
        R_ACTION($1);
        
        $$ = $1;
    }
    | modifier_cmd_list compound_cmd
    {
        $1->appendChild("main_cmd", $2);
        
        R_ACTION($1);
        
        $$ = $1;
    }
    | modifier_cmd_list ":" compound_cmd
    {
        $1->appendChild("main_cmd", $3);
        
        delete $2;
        
        R_ACTION($1);
        
        $$ = $1;
    }
    | modifier_cmd_list nonmodifier_cmd ":" compound_cmd
    {
        $1->appendChild("next_modifier", $2);
        $2->appendChild("main_cmd", $4);
        
        delete $3;
        
        R_ACTION($1);
        
        $$ = $1;
    }
    ;

modifier_cmd:
      CAPTURE
    | QUIETLY
    | NOISILY
    ;

modifier_cmd_list:
      modifier_cmd
    {
        ExprNode *node = new ExprNode("rstata_modifier_cmd_list");
        node->appendChild($1);
        $$ = node;
    }
    | modifier_cmd_list modifier_cmd
    {
        $1->appendChild($2);
        $$ = $1;
    }
    ;

nonmodifier_cmd:
      IDENT expression_list if_clause in_clause weight_clause using_clause option_list
    {
        ExprNode *node = new ExprNode("rstata_general_cmd");
        node->appendChild("verb", $1);
        node->appendChild("varlist", $2);
        
        if($3->nChildren() > 0)
            node->appendChild("if_clause", $3);
        else
            delete $3;

        if($4->nChildren() > 0)
            node->appendChild("in_clause", $4);
        else
            delete $4;

        if($5->nChildren() > 0)
            node->appendChild("weight_clause", $5);
        else
            delete $5;

        if($6->nChildren() > 0)
            node->appendChild("using_clause", $6);
        else
            delete $6;

        if($7->nChildren() > 0)
            node->appendChild("option_list", $7);
        else
            delete $7;

        $$ = node;
    }
    | IDENT
    {
        ExprNode *node = new ExprNode("rstata_general_cmd");
        node->appendChild("verb", $1);
        $$ = node;
    }
    
    /* commands with unusual enough syntax to parse them separately */
    | MERGE MERGE_SPEC expression_list using_clause option_list
    {
        ExprNode *node = new ExprNode("rstata_general_cmd");
        node->appendChild("verb", $1);
        node->addData("merge_spec", *($2));
        
        if($3->nChildren() > 0)
            node->appendChild("varlist", $3);
        else
            delete $3;

        if($4->nChildren() > 0)
            node->appendChild("using_clause", $4);
        else
            delete $4;

        if($5->nChildren() > 0)
            node->appendChild("option_list", $5);
        else
            delete $5;
        
        $$ = node;
    }
    | GENERATE expression if_clause in_clause option_list
    {
        ExprNode *node = new ExprNode("rstata_general_cmd");
        node->appendChild("verb", $1);
        node->appendChild("newvar", $2);
        
        if($3->nChildren() > 0)
            node->appendChild("if_clause", $3);
        else
            delete $3;

        if($4->nChildren() > 0)
            node->appendChild("in_clause", $4);
        else
            delete $4;

        if($5->nChildren() > 0)
            node->appendChild("option_list", $5);
        else
            delete $5;
        
        $$ = node;
    }
    | GENERATE type_spec expression if_clause in_clause option_list
    {
        ExprNode *node = new ExprNode("rstata_general_cmd");
        node->appendChild("verb", $1);
        node->addData("type_spec", *($2));
        node->appendChild("newvar", $3);
        
        if($4->nChildren() > 0)
            node->appendChild("if_clause", $4);
        else
            delete $4;

        if($5->nChildren() > 0)
            node->appendChild("in_clause", $5);
        else
            delete $5;
        
        if($6->nChildren() > 0)
            node->appendChild("option_list", $6);
        else
            delete $6;
        
        $$ = node;
    }
    | RECAST type_spec expression_list option_list
    {
        ExprNode *node = new ExprNode("rstata_general_cmd");
        node->appendChild("verb", $1);
        node->addData("type_spec", *($2));

        node->appendChild("varlist", $3);
        
        if($4->nChildren() > 0)
            node->appendChild("option_list", $4);
        else
            delete $4;
        
        $$ = node;
    }
    | DISPLAY format_spec expression
    {
        ExprNode *node = new ExprNode("rstata_general_cmd");
        node->appendChild("verb", $1);
        node->addData("format_spec", *($2));
        node->appendChild("expression", $3);

        $$ = node;
    }
    | DISPLAY expression
    {
        ExprNode *node = new ExprNode("rstata_general_cmd");
        node->appendChild("verb", $1);
        node->appendChild("expression", $2);
        
        $$ = node;
    }
    | FORMAT format_spec expression_list
    {
        ExprNode *node = new ExprNode("rstata_general_cmd");
        node->appendChild("verb", $1);
        node->addData("format_spec", *($2));
        node->appendChild("varlist", $3);

        $$ = node;
    }
    | FORMAT expression_list format_spec
    {
        ExprNode *node = new ExprNode("rstata_general_cmd");
        node->appendChild("verb", $1);
        node->addData("format_spec", *($3));
        node->appendChild("varlist", $2);

        $$ = node;
    }
    ;

type_spec:
      BYTE
    | INT
    | LONG
    | FLOAT
    | DOUBLE
    | STRING_TYPE_SPEC
    ;

format_spec:
      STRING_FORMAT
    | NUMBER_FORMAT
    | DATETIME_FORMAT
    ;

/*
 ************************************************************
 * The expression grammar. Note that varlists are expressions
 * syntactically, even if they're not semantically.
 ************************************************************
*/

assignment_operator:
    "="
    ;

unary_operator:
      "-"
    | "+"
    | "!"
    ;
    
factor_operator:
      CONT_OPERATOR
    | BASE_OPERATOR
    | IND_OPERATOR
    | OMIT_OPERATOR
    ;

power_operator:
    "^"
    ;

multiplication_operator:
      "*"
    | "/"
    ;

additive_operator:
      "+"
    | "-"
    ;

relational_operator:
      "<"
    | ">"
    | ">="
    | "<="
    ;

equality_operator:
      "=="
    | "!="
    ;

logical_operator:
      "&"
    | "|"
    ;

label_operator:
    ":"
    ;

cross_operator:
      "##"
    | "#"
    ;

primary_expression:
      IDENT
    | IDENT_WITH_LEVEL
    | NUMBER
    | NUMBER_MISSING
    | STRING_LITERAL
    | STRING_MISSING
    | DATE
    | DATETIME
    | "(" expression ")"
    {
        delete $1;
        delete $3;
        
        $$ = $2;
    }
    ;

label_expression:
      primary_expression 
    | label_expression label_operator primary_expression
    {
        ExprNode *node = new ExprNode("rstata_expression");
        node->addData("value", *($2));
        node->appendChild("left", $1);
        node->appendChild("right", $3);
        $$ = node;
    }
    ;

factor_expression:
      label_expression
    | factor_expression factor_operator label_expression
    {
        $2->appendChild("left", $1);
        $2->appendChild("right", $3);
        
        $$ = $2; // ExprNode constructed by the lexer, which is a bit of a hack
    }
    ;

postfix_expression:
      factor_expression %prec "["
    | postfix_expression "[" expression "]" %prec "["
    {
        ExprNode *node = new ExprNode("rstata_expression");
        node->addData("value", std::string("[]"));
        node->appendChild("left", $1);
        node->appendChild("right", $3);
        
        delete $2;
        delete $4;

        $$ = node;
    }
    | postfix_expression "(" ")" %prec "("
    {
        ExprNode *node = new ExprNode("rstata_expression");
        node->addData("value", std::string("()"));
        node->appendChild("left", $1);
        
        delete $2;
        delete $3;
        
        $$ = node;
    }
    | postfix_expression "(" argument_expression_list ")"
    {
        ExprNode *node = new ExprNode("rstata_expression");
        node->addData("value", std::string("()"));
        node->appendChild("left", $1);
        node->appendChild("right", $3);
        
        delete $2;
        delete $4;

        $$ = node;
    }
    ;

power_expression:
      postfix_expression %prec EXPONENT
    | power_expression power_operator postfix_expression %prec EXPONENT
    {
        ExprNode *node = new ExprNode("rstata_expression");
        node->addData("value", *($2));
        node->appendChild("left", $1);
        node->appendChild("right", $3);
        $$ = node;
    }
    ;

unary_expression:
      power_expression
    | unary_operator power_expression
    {
        ExprNode *node = new ExprNode("rstata_expression");
        node->addData("value", *($1));
        node->appendChild("right", $2);
        $$ = node;
    }
    ;

multiplication_expression:
      unary_expression
    | multiplication_expression multiplication_operator unary_expression
    {
        ExprNode *node = new ExprNode("rstata_expression");
        node->addData("value", *($2));
        node->appendChild("left", $1);
        node->appendChild("right", $3);
        $$ = node;
    }
    ;

additive_expression:
      multiplication_expression %prec "+"
    | additive_expression additive_operator multiplication_expression %prec "+"
    {
        ExprNode *node = new ExprNode("rstata_expression");
        node->addData("value", *($2));
        node->appendChild("left", $1);
        node->appendChild("right", $3);
        $$ = node;
    }
    ;

relational_expression:
      additive_expression %prec RELATIONAL
    | relational_expression relational_operator additive_expression %prec RELATIONAL
    {
        ExprNode *node = new ExprNode("rstata_expression");
        node->addData("value", *($2));
        node->appendChild("left", $1);
        node->appendChild("right", $3);
        $$ = node;
    }
    ;

equality_expression:
      relational_expression
    | equality_expression equality_operator relational_expression
    {
        ExprNode *node = new ExprNode("rstata_expression");
        node->addData("value", *($2));
        node->appendChild("left", $1);
        node->appendChild("right", $3);
        $$ = node;
    }
    ;

logical_expression:
      equality_expression
    | logical_expression logical_operator equality_expression
    {
        ExprNode *node = new ExprNode("rstata_expression");
        node->addData("value", *($2));
        node->appendChild("left", $1);
        node->appendChild("right", $3);
        $$ = node;
    }
    ;

cross_expression:
      logical_expression
    | cross_expression cross_operator logical_expression
    {
        ExprNode *node = new ExprNode("rstata_expression");
        node->addData("value", *($2));
        node->appendChild("left", $1);
        node->appendChild("right", $3);
        $$ = node;
    }
    ;

argument_expression_list:
      cross_expression
    {
        ExprNode *node = new ExprNode("rstata_argument_expression_list");
        node->appendChild($1);
        $$ = node;
    }
    | argument_expression_list "," cross_expression
    {
        $1->appendChild($3);
        
        delete $2;
        
        $$ = $1;
    }
    ;

expression:
      cross_expression
    | IDENT assignment_operator cross_expression
    {
        ExprNode *node = new ExprNode("rstata_expression");
        node->addData("value", *($2));
        node->appendChild("left", $1);
        node->appendChild("right", $3);
        $$ = node;
    }
    ;

expression_list:
      expression
    {
        ExprNode *node = new ExprNode("rstata_expression_list");
        node->appendChild($1);
        $$ = node;
    }
    | expression_list expression
    {
        $1->appendChild($2);
        $$ = $1;
    }
    | type_spec "(" expression_list ")"
    {
        ExprNode *node = new ExprNode("rstata_type_constructor");
        node->addData("type_spec", *($1));
        node->appendChild("varlist", $3);
        
        delete $2;
        delete $4;

        $$ = node;
    }
    ;

/*
 **************************************************
 * Options and option lists
 **************************************************
 */

option_list:
      %empty
    {
        $$ = new ExprNode("rstata_option_list");
    }
    | "," options
    {
        delete $1;

        $$ = $2;
    }
    ;

options:
      option
    {
        ExprNode *node = new ExprNode("rstata_option_list");
        node->appendChild($1);
        $$ = node;
    }
    | options option
    {
        $1->appendChild($2);
        $$ = $1;
    }
    ;

option:
      IDENT
    {
        ExprNode *node = new ExprNode("rstata_option");
        node->appendChild("name", $1);
        
        $$ = node;
    }
    | IDENT "(" expression_list ")"
    {
        ExprNode *node = new ExprNode("rstata_option");
        node->appendChild("name", $1);
        node->appendChild("args", $3);
        
        delete $2;
        delete $4;
        
        $$ = node;
    }
    ;

/*
 **************************************************
 * The weight clause
 **************************************************
 */

weight_clause:
      %empty
    {
        $$ = new ExprNode("rstata_weight_clause");
    }
    | "[" IDENT assignment_operator expression "]"
    {
        ExprNode *node = new ExprNode("rstata_weight_clause");
        node->appendChild("left", $2);
        node->appendChild("right", $4);
        
        delete $1;
        delete $3;
        delete $5;

        $$ = node;
    }
    ;

/*
 **************************************************
 * The if clause
 **************************************************
 */

if_clause:
      %empty
    {
        $$ = new ExprNode("rstata_if_clause");
    }
    | IF expression
    {
        ExprNode *node = new ExprNode("rstata_if_clause");
        node->appendChild("if_expression", $2);
        
        delete $1;

        $$ = node;
    }
    ;

/*
 **************************************************
 * The in clause
 **************************************************
 */

in_clause:
      %empty
    {
        $$ = new ExprNode("rstata_in_clause");
    }
    | IN NUMBER "/" NUMBER
    {
        ExprNode *node = new ExprNode("rstata_in_clause");
        node->appendChild("upper", $2);
        node->appendChild("lower", $4);
        
        delete $1;
        delete $3;

        $$ = node;
    }
    ;

/*
 **************************************************
 * The using clause
 **************************************************
 */

using_clause:
      %empty
    {
        $$ = new ExprNode("rstata_using_clause");
    }
    | USING STRING_LITERAL
    {
        ExprNode *node = new ExprNode("rstata_using_clause");
        node->appendChild("filename", $2);
        
        delete $1;

        $$ = node;
    }
    | USING IDENT
    {
        ExprNode *node = new ExprNode("rstata_using_clause");
        node->appendChild("filename", $2);
        
        delete $1;

        $$ = node;
    }
    ;

%%

