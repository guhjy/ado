%{
#include <cstdio>
#include <cstring>
#include <iostream>
#include <Rcpp.h>
#include "rstata.hpp"

void raise_condition(const std::string& msg, const std::string& type);

extern "C" int yylex(void);

void yyerror(std::unique_ptr<BaseExprNode> **ast_root, const char *str)
{
        raise_condition(str, "error");
}
 
int yywrap()
{
        return 1;
} 
 
%}

%union {
    char *str;
}

%parse-param {std::unique_ptr<BaseExprNode> **ast_root}
%define parse.error verbose
%start translation_unit

%token <str> NEWLINE

%token <str> EMBEDDED_R;

/* Literals of various fundamental types */
%token <str> NUMBER IDENT STRING_LITERAL
%token <str> NUMBER_MISSING STRING_MISSING DATE TIME DATETIME

/* Operators */
%token <str> GT_OP LT_OP EQ_OP NE_OP OR_OP AND_OP

/* Command components and keywords */
%token <str> USING IF WITH IN

/* Commands with unusual enough syntax they have to be parsed separately */
%token <str> QUIETLY CAPTURE NOISILY /* Prefix commands that can be used without a colon */
%token <str> MERGE

%%

/*
 *************************************************
 * The start symbol, a "command" and escaping to R
 *************************************************
 */

translation_unit:
      external_statement
    | translation_unit external_statement
    ;

external_statement:
      cmd
    | compound_cmd
    ;

compound_cmd:
    '{' cmds '}'
    ;

cmds:
      cmd
    | cmds cmd
    ;

cmd:
      embedded_r_cmd
    | modifier_cmd_list nonmodifier_cmd
    | modifier_cmd_list ':' nonmodifier_cmd
    | modifier_cmd_list nonmodifier_cmd ':' nonmodifier_cmd
    ;

embedded_r_cmd:
    EMBEDDED_R
    ;

modifier_cmd:
      CAPTURE
    | QUIETLY
    | NOISILY
    ;

modifier_cmd_list:
      modifier_cmd
    | modifier_cmd_list modifier_cmd
    ;

nonmodifier_cmd:
      compound_cmd
    | special_cmd
    | IDENT expression_list if_clause in_clause weight_clause using_clause option_list
    | IDENT
    ;

special_cmd:
    merge_cmd
    ;

/*
 ************************************************************
 * The expression grammar. Note that varlists are expressions
 * syntactically, even if they're not semantically.
 ************************************************************
*/

assignment_operator:
    '='
    ;

unary_operator:
      '-'
    | '+'
    | '!'
    | '~'
    ;

power_operator:
    '^'
    ;

multiplication_operator:
      '*'
    | '/'
    | '%'
    ;

additive_operator:
      '+'
    | '-'
    ;

relational_operator:
      '<'
    | '>'
    | GT_OP
    | LT_OP
    ;

equality_operator:
      EQ_OP
    | NE_OP
    ;

primary_expression:
      IDENT
    | NUMBER
    | NUMBER_MISSING
    | STRING_LITERAL
    | STRING_MISSING
    | DATE
    | TIME
    | DATETIME
    | '(' expression ')'
    ;

postfix_expression:
      primary_expression
    | postfix_expression '[' expression ']'
    | postfix_expression '(' ')'
    | postfix_expression '(' argument_expression_list ')'
    ;

power_expression:
      postfix_expression
    | postfix_expression power_operator postfix_expression
    ;

unary_expression:
      power_expression
    | unary_operator power_expression
    ;

multiplication_expression:
      unary_expression
    | multiplication_expression multiplication_operator unary_expression
    ;

additive_expression:
      multiplication_expression
    | additive_expression additive_operator multiplication_expression
    ;

relational_expression:
      additive_expression
    | relational_expression relational_operator additive_expression
    ;

equality_expression:
      relational_expression
    | equality_expression equality_operator relational_expression
    ;

logical_and_expression:
      equality_expression
    | logical_and_expression AND_OP equality_expression
    ;

logical_or_expression:
      logical_and_expression
    | logical_or_expression OR_OP logical_and_expression
    ;

argument_expression_list:
      logical_or_expression
    | argument_expression_list ',' logical_or_expression
    ;

expression:
      logical_or_expression
    | IDENT assignment_operator logical_or_expression
    ;

expression_list:
      expression
    | expression_list expression
    ;

/*
 **************************************************
 * Options and option lists
 **************************************************
 */

option_list:
      %empty
    | option_list ',' option
    ;

option:
      IDENT
    | IDENT '(' expression_list ')'
    ;

/*
 **************************************************
 * The weight clause
 **************************************************
 */

weight_clause:
      %empty
    | '[' IDENT '=' expression ']';

/*
 **************************************************
 * The if clause
 **************************************************
 */

if_clause:
      %empty
    | IF expression
    ;

/*
 **************************************************
 * The in clause
 **************************************************
 */

in_clause:
      %empty
    | IN NUMBER '/' NUMBER
    ;

/*
 **************************************************
 * The using clause
 **************************************************
 */

using_clause:
      %empty
    | USING STRING_LITERAL
    | USING IDENT
    ;

/*
 ******************************
 * The "special" Stata commands
 ******************************
 */

merge_cmd:
    MERGE
    ;

%%

void
raise_condition(const std::string& msg, const std::string& type)
{
  Rcpp::List cond;
  cond["message"] = msg;
  cond["call"] = R_NilValue;
  cond.attr("class") = Rcpp::CharacterVector::create(type, "condition");
  Rcpp::Function stopper("stop");
  stopper(cond);
}

