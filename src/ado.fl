%{
#include <iostream>
#include "rstata.h"
#include "y.tab.h"

using namespace std;
#define YY_DECL extern "C" int yylex()

void long_comment();
void short_comment();
%}

%%
"/*"                    { long_comment(); } /* the lexer eats comments */
\/\/                    { short_comment(); }

-?[0-9]+(\.[0-9]+)?     { yylval.str = strdup(yytext); yylval.num = atoi(yytext); return NUMBER; }
\*                      { yylval.str = strdup(yytext); return '*'; }
\+                      { yylval.str = strdup(yytext); return '+'; }
\/                      { yylval.str = strdup(yytext); return '/'; }
\-                      { yylval.str = strdup(yytext); return '-'; }

(?i:insheet)            { yylval.str = strdup(yytext); return INSHEET; }
(?i:tab)                { yylval.str = strdup(yytext); return TABLE; }
(?i:sum)                { yylval.str = strdup(yytext); return SUM; }
(?i:summarize)          { yylval.str = strdup(yytext); return SUM; }
(?i:di)                 { yylval.str = strdup(yytext); return DI; }
(?i:display)            { yylval.str = strdup(yytext); return DI; }

(?i:using)              { yylval.str = strdup(yytext); return USING; }
(?i:by)                 { yylval.str = strdup(yytext); return BY; }
(?i:in)                 { yylval.str = strdup(yytext); return IN; }
(?i:if)                 { yylval.str = strdup(yytext); return IF; }
(?i:pweight)            { yylval.str = strdup(yytext); return PWEIGHT; }
(?i:aweight)            { yylval.str = strdup(yytext); return AWEIGHT; }

\"(\\.|[^"\\])*\"       { yylval.str = strdup(yytext); return STRING_LITERAL; }
\'(\\.|[^'\\])*\'       { yylval.str = strdup(yytext); return STRING_LITERAL; }

"&&"                    { yylval.str = strdup(yytext); return AND_OP; }
"&"                     { yylval.str = strdup(yytext); return AND_OP; }
"||"                    { yylval.str = strdup(yytext); return OR_OP; }
"|"                     { yylval.str = strdup(yytext); return OR_OP; }
">="                    { yylval.str = strdup(yytext); return GT_OP; }
"<="                    { yylval.str = strdup(yytext); return LE_OP; }
"=="                    { yylval.str = strdup(yytext); return EQ_OP; }
"!="                    { yylval.str = strdup(yytext); return NE_OP; }

\[                      { yylval.str = strdup(yytext); return '['; }
\]                      { yylval.str = strdup(yytext); return ']'; }
\(                      { yylval.str = strdup(yytext); return '('; }
\)                      { yylval.str = strdup(yytext); return ')'; }
\{                      { yylval.str = strdup(yytext); return '{'; }
\}                      { yylval.str = strdup(yytext); return '}'; }
\"                      { yylval.str = strdup(yytext); return '"'; }
\'                      { yylval.str = strdup(yytext); return '\''; }
=                       { yylval.str = strdup(yytext); return '='; }
%                       { yylval.str = strdup(yytext); return '%'; }
,                       { yylval.str = strdup(yytext); return ','; }
:                       { yylval.str = strdup(yytext); return ':'; }


[_A-Za-z][A-Za-z0-9_]*  { yylval.str = strdup(yytext); return IDENT; }

\n                      /* do nothing */;
[ \t]+                  /* do nothing */;
%%

void long_comment()
{
    char c, c1;

loop:
    while ((c = getc(yyin)) != '*' && c != 0)
        putchar(c);

    if ((c1 = getc(yyin)) != '/' && c != 0)
    {
        unput(c1);
        goto loop;
    }

    if (c != 0)
        putchar(c1);
}

void short_comment()
{
    char c;
    
    while ((c = getc(yyin)) != '\n' && c != 0)
        putchar(c);
}

